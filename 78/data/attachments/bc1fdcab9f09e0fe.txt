const jsonData = pm.response.json();

pm.test("Status code is 200", () => {
    pm.response.to.have.status(200);
});

pm.test("Response indicates successful processing", () => {
    pm.expect(jsonData).to.have.property("isSuccessful", true);
    pm.expect(jsonData).to.have.property("message").that.is.a("string").and.not.empty;
    pm.expect(jsonData).to.have.property("messages").that.is.an("array").that.is.empty;
    pm.expect(jsonData).to.have.property("timeGenerated").that.is.a("string");
});

pm.test("Response contains data object with expected properties", () => {
    pm.expect(jsonData).to.have.property("data").that.is.an("object");
    pm.expect(jsonData.data).to.have.property("state").that.is.a("string");
    pm.expect(jsonData.data).to.have.property("address").that.is.a("string");
    pm.expect(jsonData.data).to.have.property("meterType").that.is.a("string");
    pm.expect(jsonData.data).to.have.property("meterAccountOwner").that.is.a("string");
    pm.expect(jsonData.data).to.have.property("minimumPurchasbleTokenAmount").that.is.a("number");
});