const jsonData = pm.response.json();

pm.test("Status code is 200", () => {
    pm.response.to.have.status(200);
});

pm.test("Response indicates successful processing", () => {
    pm.expect(jsonData).to.have.property("isSuccessful", true);
    pm.expect(jsonData).to.have.property("message", "Request was processed successfully.");
    pm.expect(jsonData).to.have.property("messages").that.is.an("array").that.is.empty;
    pm.expect(jsonData).to.have.property("timeGenerated").that.is.a("string");
});

pm.test("Response contains states array with 37 states", () => {
    pm.expect(jsonData.data).to.have.property("states").that.is.an("array").with.lengthOf(37);
});

pm.test("Response contains serviceProviders array with at least one provider", () => {
    pm.expect(jsonData.data).to.have.property("serviceProviders").that.is.an("array").that.is.not.empty;
});

pm.test("Service provider has required properties", () => {
    const firstProvider = jsonData.data.serviceProviders[0];
    pm.expect(firstProvider).to.have.property("code").that.is.a("string");
    pm.expect(firstProvider).to.have.property("name").that.is.a("string");
    pm.expect(firstProvider).to.have.property("state").that.is.a("string");
    pm.expect(firstProvider).to.have.property("minPurchaseableAmount").that.is.a("number");
});